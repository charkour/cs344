Charles Kornoelje | CS 344 | Lab06 | 3/15/20 | Cal Uni | Problem Framing

6.2) Gmail

1. We want the ML model to predict if an email in Gmail is "important".
2. Our ideal outcome is to flag emails as important that are imperative the to user, increasing the user experience
and insuring they do not miss an important email. Other emails will not receive an important flag on them.
3a. Our success metric would be the number of correctly labeled emails.
3b. We want 95% of important emails to be properly flagged important and others.
3c. Failure would be if the model does not achieve our success metric of correct labeling 95% of the time.
4a. The output from the model will be if an email is labeled as important or not.
4b. The output will be classification, if an email is classified as important or not.
5a. The output will be a boolean value for each new incoming email, flagged as important or not.
5b. The output will immediately be shown to the user in the UI.
6. One possible heuristic would be to flag emails as important if it from a sender that the user
usually responds to and spends a long time reading the email. Another heuristic could be if an email
contains specific keywords or is in reply to a ongoing conversation between the user and another.
7a. Our problem is best framed as a binary classification, which predicts if an email is important or not.
7b. Binary classification. Each email is either either important or not based on features (such as
date, time, sender, contents, subject).
8. Each row is an email, and the columns are different features of the email.
Date    | Time      | Sender        | Contents          | Subject       | Output (Label)
03/20/20 6:00am     jon@calvin.edu   Hi Charlie....      Turtle Tracker  Important
03/20/20 3:59am     spam@email.com   HELLO.I am PRINCE   Send my GOLD    Unimportant

9. Date, Time, Sender, Contents, Subject all come from the metadata of the email.
It will not be too hard to parse the email for this data and pipeline it into a .csv.
10. Sender        | Contents                | Subject
   jen@calvin.edu   Greetings: I can meet.   Meeting at Cottage
By using Sender, Contents, and Subject, a model can be trained to look for senders with
previous correspondence as well as parsing the contents and subjects for specific words
the user has seen in other important emails (emails that they have engaged with in the past).
